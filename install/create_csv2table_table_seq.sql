/* 
-This plsql block when executed creates table named, csv2table and sequence named, csv2table_seq. 
-Plugin inserts into csv2table and uses csv2table_seq to insert value into upload_id column
-If you want to create csv2table in schema, other than the apex parsing schema, or change the name, then
 then please create a synonym with name "CSV2TABLE" and grant access to apex parsing schema
in parsing schema
*/

declare
    l_cnt pls_integer :=0;
    l_table_name varchar2(30) := 'CSV2TABLE';
    l_seq_name varchar2(30 ):= 'CSV2TABLE_SEQ';
    l_create_seq_sql varchar2(255) := ' create  sequence '|| l_seq_name ||' increment by 1 cache 50 ';
    l_create_csv2table_sql varchar2(32767) := 'create table '|| l_table_name ||'
    ( upload_id number, 
    apex_session_id number,
    apex_user       varchar2(255),
    insert_date     date,
    filename varchar2(255),
    c1   varchar2(255),
    c2   varchar2(255),
    c3   varchar2(255),
    c4   varchar2(255),
    c5   varchar2(255),
    c6   varchar2(255),
    c7   varchar2(255),
    c8   varchar2(255),
    c9   varchar2(255),
    c10   varchar2(255),
    c11   varchar2(255),
    c12   varchar2(255),
    c13   varchar2(255),
    c14   varchar2(255),
    c15   varchar2(255),
    c16   varchar2(255),
    c17   varchar2(255),
    c18   varchar2(255),
    c19   varchar2(255),
    c20   varchar2(255),
    c21   varchar2(255),
    c22   varchar2(255),
    c23   varchar2(255),
    c24   varchar2(255),
    c25   varchar2(255),
    c26   varchar2(255),
    c27   varchar2(255),
    c28   varchar2(255),
    c29   varchar2(255),
    c30   varchar2(255),
    c31   varchar2(255),
    c32   varchar2(255),
    c33   varchar2(255),
    c34   varchar2(255),
    c35   varchar2(255),
    c36   varchar2(255),
    c37   varchar2(255),
    c38   varchar2(255),
    c39   varchar2(255),
    c40   varchar2(255),
    c41   varchar2(255),
    c42   varchar2(255),
    c43   varchar2(255),
    c44   varchar2(255),
    c45   varchar2(255),
    c46   varchar2(255),
    c47   varchar2(255),
    c48   varchar2(255),
    c49   varchar2(255),
    c50   varchar2(255),
    c51   varchar2(255),
    c52   varchar2(255),
    c53   varchar2(255),
    c54   varchar2(255),
    c55   varchar2(255),
    c56   varchar2(255),
    c57   varchar2(255),
    c58   varchar2(255),
    c59   varchar2(255),
    c60   varchar2(255),
    c61   varchar2(255),
    c62   varchar2(255),
    c63   varchar2(255),
    c64   varchar2(255),
    c65   varchar2(255),
    c66   varchar2(255),
    c67   varchar2(255),
    c68   varchar2(255),
    c69   varchar2(255),
    c70   varchar2(255),
    c71   varchar2(255),
    c72   varchar2(255),
    c73   varchar2(255),
    c74   varchar2(255),
    c75   varchar2(255),
    c76   varchar2(255),
    c77   varchar2(255),
    c78   varchar2(255),
    c79   varchar2(255),
    c80   varchar2(255),
    c81   varchar2(255),
    c82   varchar2(255),
    c83   varchar2(255),
    c84   varchar2(255),
    c85   varchar2(255),
    c86   varchar2(255),
    c87   varchar2(255),
    c88   varchar2(255),
    c89   varchar2(255),
    c90   varchar2(255),
    c91   varchar2(255),
    c92   varchar2(255),
    c93   varchar2(255),
    c94   varchar2(255),
    c95   varchar2(255),
    c96   varchar2(255),
    c97   varchar2(255),
    c98   varchar2(255),
    c99   varchar2(255),
    c100   varchar2(255)
    )';

begin
    --create table
    select count(1) into l_cnt from all_objects where object_name = l_table_name and object_type='TABLE';
    if l_cnt > 0 then
        execute immediate 'drop table '|| l_table_name;
    end if;
    select count(1) into l_cnt from all_objects where object_name = l_table_name and object_type='TABLE';
    if l_cnt = 0 then
        execute immediate l_create_csv2table_sql;
    end if;
    select count(1) into l_cnt from all_objects where object_name = l_table_name and object_type='TABLE';
    if l_cnt > 0 then
        dbms_output.put_line(l_table_name||' created');
        execute immediate 'comment on column csv2table.upload_id is ''Upload Identifier generated by csv2table_seq. The value can be used to select all records for a uploaded file''';
        execute immediate 'comment on column csv2table.apex_session_id is ''Apex Session ID inserted using APP_SESSION bind variable''';
        execute immediate 'comment on column csv2table.apex_user is ''Apex username, inserted using APP_USER bind variable''';
        execute immediate 'comment on column csv2table.insert_date is ''datetime when chunk of record were inserted. All records in chunk will have same insert datetime''';
        execute immediate 'comment on column csv2table.filename is ''filename of upload local file or url for remote upload''';
        execute immediate 'comment on column csv2table.c1 is ''First column of csv file''';
        execute immediate 'comment on column csv2table.c1 is ''Second column of csv file''';
    end if;
    --create sequence
    select count(1) into l_cnt from all_sequences where sequence_name = l_seq_name;
    if l_cnt > 0 then
        execute immediate 'drop sequence '||l_seq_name;
    end if;
    if l_cnt = 0 then
        execute immediate l_create_seq_sql;
    end if;
    select count(1) into l_cnt from all_sequences where sequence_name = l_seq_name;
    if l_cnt > 0 then
        dbms_output.put_line(l_seq_name||' created');
    end if;    
exception
 when others then
    dbms_output.put_line('csv2table creation failed ');
    raise;
end;
/